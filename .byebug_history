# FIXME_SG: Add this file to gitignore
c
category_id_was
category_was
category
category_id_was
changes[:category_id]
c
n
c
params[:locale]='en'
params[:locale]
params
c
params[:locale]
params(:locale)
params
c
params(:locale)
params[:locale]
params
c
self.changes[:category_id].first
 Category.find(self.changes[:category_id].f
c
line_items.inject(0) { |a, b| a+=b.total_price } 
line_items.to_a.inject(0) { |a, b| a+=b.total_price } 
line_items.first.total_price 
line_items.total_price 
line_items.to_a.inject{ |a, b| a.total_price } 
line_items.to_a.inject(sum=0){ |a, b| a.total_price } 
line_items.to_a.inject(sum=0){ |a, b| sum+=a.total_price } 
line_items.to_a.inject{ |a, b| a.total_price + b.total_price }  == line_items.to_a.sum { |item| item.total_price }
line_items.to_a.inject{ |a, b| a.total_price + b.total_price }  
line_items.inject{ |a, b| a.total_price + b.total_price }
line_items.to_a.sum { |item| item.total_price }
self
line_items
c
line_items.find_by(product_id: product_id)
line_items
self
!nil
!!nil
Category.where(id: 117) == Category.find_by(id: 117)
Category.where(id: 117) == Category.where(id: 117)
Category.where(id: 117)
Category.find_by(id: 11)
Category.find_by(id: 1)
Category.find_by(id: 117)
Category.where(id: 117)
Category.where(id: 11)
Category.find_by(11)
Category.find(1199)
Category.find(11)
Category.find_by(11)
Category.find_by(111000)
Category.find_by(111)
Category.find_by('a')
Category.find_by(a)
Category.find(a)
Cart.enabled
!Cart.enabled
Cart.enabled
c
Category.find(self.changes[:category_id].first).count
self.category
Category.find(self.changes[:category_id].first)
Category.find(self.changes[:category_id].last)
self.changes[:category_id].last
self.changes[:category_id].first
self.changes[:category_id][0]
self.changes[:category_id]
self.changes
self.category
self.category.count
self.category.count_was
self.count_was
self.category_was
self.changes
changed?
self
self_was
self_change
_change
D_change
change
self_was
_was
self
changed?
self.changed?
self.category_change
self.category_changed?
self.category._changed?
self.category
self.category.changed?
c
self.category.changed?
self.category_was
self.category
@product.category
product.category
category_was
category
c
category
Category.first.subcategories.pluck('count')_was
category.subcategories
Category.first.subcategories.pluck('count').sum
category.first.subcategories.pluck('count').sum
category.subcategories.pluck('count').sum
category.subcategories.pluck('count')
category.subcategories.to_a.sum {|count|count}
category.subcategories.to_a.sum {count}
category.subcategories.to_a.sum 
category.subcategories
Category
Product.find(51)
id
category.subcategories.try(:subcategories)
category.subcategories.subcategories
category.subcategories.subcategoriea
category.subcategories
category.products.size
Category.find(category).products.size
Category.find(category)
category.find(category)
category
c
line_items.inject{|a, b| a.total_price}
line_items.inject{|a, b| a.total_price+b.total_price} == line_items.to_a.sum { |item| item.total_price }
line_items.inject{|a, b| a.total_price+b.total_price}
line_items.to_a.inject{|a, b| a.total_price+b.total_price} == line_items.to_a.sum { |item| item.total_price }
line_items.to_a.inject{|a, b| a.total_price+b.total_price}
line_items.to_a.inject{|a, b| a.price+b.price}
line_items.to_a
line_items
line_items.product.inject{|a,b| a.price+b.price}
line_items.product.inject(|a,b| a.price+b.price)
line_items.product.price
line_items.product
line_items
line_items.price.inject(:+)
line_items.inject {|a,b| a*b}
line_items.inject {|a,b| a*total_price}
line_items.inject {|a,b| a.sum*total_price}
line_items.to_a.sum 
line_items.to_a
line_items.to_a.sum 
line_items.to_a.sum { |item| item.total_price }
line_items.size
line_items
c
@cart
User.find(session[:user_id])
@users
@user
 session[:user_id]
@order
@order.uer_id
Order
@order.user
@order.users
@order.user
@order = Order.new(order_params)
@order
@user
user
params
c
@order
order
cart
params[:id]
params
params[:id]
c
cart
@cart.line_items.empty?
@cart
c
@cart
Cart.last
Cart.all
Cart
params
cart
@cart
c
Category.find(category).update_columns(count: Category.find(category).products.size)
Category.find(category).update_columns(:count, Category.find(category).products.size)
Category.find(category).products.size
Category.find(category)
Category.find(category_id)
Category.find(self.category_id)
Category.find(self.category_id).update_column(count:  Category.find(self.category_id).products.size)
self
c
params
self
self == request
self
c
params[:controller] != "store"
params[:controller] == "store"
params[:controller] == :store
params[:controller] != :store
params[:controller]
c
params
c
params
c
request.env['HTTP_USER_AGENT'].downcase.match(/mozilla/i).present? 
request.env['HTTP_USER_AGENT'].downcase.match(/chrom/i).present? 
request.env['HTTP_USER_AGENT'].downcase.match(/chrome/i).present? 
request.env['HTTP_USER_AGENT'].downcase.match(/chrome/i) 
request.env['HTTP_USER_AGENT'].downcase.match(/mozilla/i) 
request.env['HTTP_USER_AGENT'].downcase.match(/firefox/i) 
request.user_agent
request.env['HTTP_USER_AGENT'] =~ /[^\(]*[^\)]*[^\t]Firefox\//
request.env["HTTP_USER_AGENT"]
request.env
request
req
c
"h".to_i
params[:id]
params
c
@categorise_products.present?
@categorise_products.exists?
@categorise_products
!!@categorise_products
c
Category.find(6).products
@categorise_products.size
@categorise_products
Category.first.products
Category.first.products.size
Category.first.products
@categorise_products
@categorise_products.to_a
@categorise_products
c
!!@categorise_products
@categorise_products.exists?
Category.find(5).products
Category.find(5)
Product.find_by(category_id: params[:id].to_i)
Category.find(5)
params[:id]
Product.find_by(category_id: params[:id])
@categorise_products
c
@categorise_products
